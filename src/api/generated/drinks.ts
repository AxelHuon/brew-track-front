/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BrewTrack API üçª
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AddDrinkDTO,
  DrinkDTO,
  DrinkTypeCountDTO,
  DrinkTypeDTO,
  GetDrinksByUserIdDTO,
  GetDrinksByUserIdParams,
  MonthlyDrinkCountDTO,
} from './Api.schemas';

import { customInstance } from '../customInstance';
import type { BodyType } from '../customInstance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary R√©cup√©rer tous les types de boissons
 */
export const getDrinksType = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DrinkTypeDTO[]>(
    { url: `/api/drinks/drinks-type`, method: 'GET', signal },
    options
  );
};

export const getGetDrinksTypeQueryKey = () => {
  return [`/api/drinks/drinks-type`] as const;
};

export const getGetDrinksTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getDrinksType>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDrinksType>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDrinksTypeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDrinksType>>> = ({
    signal,
  }) => getDrinksType(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDrinksType>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDrinksTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDrinksType>>
>;
export type GetDrinksTypeQueryError = unknown;

export function useGetDrinksType<
  TData = Awaited<ReturnType<typeof getDrinksType>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDrinksType>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDrinksType>>,
          TError,
          Awaited<ReturnType<typeof getDrinksType>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDrinksType<
  TData = Awaited<ReturnType<typeof getDrinksType>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDrinksType>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDrinksType>>,
          TError,
          Awaited<ReturnType<typeof getDrinksType>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDrinksType<
  TData = Awaited<ReturnType<typeof getDrinksType>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDrinksType>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary R√©cup√©rer tous les types de boissons
 */

export function useGetDrinksType<
  TData = Awaited<ReturnType<typeof getDrinksType>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDrinksType>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDrinksTypeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary R√©cup√©rer les boissons d'un utilisateur
 */
export const getDrinksByUserId = (
  userId: string,
  params?: GetDrinksByUserIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<GetDrinksByUserIdDTO>(
    { url: `/api/drinks/${userId}`, method: 'GET', params, signal },
    options
  );
};

export const getGetDrinksByUserIdQueryKey = (
  userId: string,
  params?: GetDrinksByUserIdParams
) => {
  return [`/api/drinks/${userId}`, ...(params ? [params] : [])] as const;
};

export const getGetDrinksByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDrinksByUserId>>,
  TError = void,
>(
  userId: string,
  params?: GetDrinksByUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinksByUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDrinksByUserIdQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDrinksByUserId>>
  > = ({ signal }) => getDrinksByUserId(userId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDrinksByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDrinksByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDrinksByUserId>>
>;
export type GetDrinksByUserIdQueryError = void;

export function useGetDrinksByUserId<
  TData = Awaited<ReturnType<typeof getDrinksByUserId>>,
  TError = void,
>(
  userId: string,
  params: undefined | GetDrinksByUserIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinksByUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDrinksByUserId>>,
          TError,
          Awaited<ReturnType<typeof getDrinksByUserId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDrinksByUserId<
  TData = Awaited<ReturnType<typeof getDrinksByUserId>>,
  TError = void,
>(
  userId: string,
  params?: GetDrinksByUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinksByUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDrinksByUserId>>,
          TError,
          Awaited<ReturnType<typeof getDrinksByUserId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDrinksByUserId<
  TData = Awaited<ReturnType<typeof getDrinksByUserId>>,
  TError = void,
>(
  userId: string,
  params?: GetDrinksByUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinksByUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary R√©cup√©rer les boissons d'un utilisateur
 */

export function useGetDrinksByUserId<
  TData = Awaited<ReturnType<typeof getDrinksByUserId>>,
  TError = void,
>(
  userId: string,
  params?: GetDrinksByUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinksByUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDrinksByUserIdQueryOptions(
    userId,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary R√©cup√©rer le nombre de boissons par type pour un utilisateur
 */
export const getDrinkTypeCountByUserId = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DrinkTypeCountDTO>(
    { url: `/api/drinks/${userId}/drinks-type-count`, method: 'GET', signal },
    options
  );
};

export const getGetDrinkTypeCountByUserIdQueryKey = (userId: string) => {
  return [`/api/drinks/${userId}/drinks-type-count`] as const;
};

export const getGetDrinkTypeCountByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDrinkTypeCountByUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>
  > = ({ signal }) => getDrinkTypeCountByUserId(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDrinkTypeCountByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>
>;
export type GetDrinkTypeCountByUserIdQueryError = void;

export function useGetDrinkTypeCountByUserId<
  TData = Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
  TError = void,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
          TError,
          Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDrinkTypeCountByUserId<
  TData = Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
          TError,
          Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDrinkTypeCountByUserId<
  TData = Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary R√©cup√©rer le nombre de boissons par type pour un utilisateur
 */

export function useGetDrinkTypeCountByUserId<
  TData = Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDrinkTypeCountByUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDrinkTypeCountByUserIdQueryOptions(
    userId,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary R√©cup√©rer le nombre de boissons consomm√©es par mois pour un utilisateur
 */
export const getMonthlyDrinkCount = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<MonthlyDrinkCountDTO>(
    { url: `/api/drinks/${userId}/monthly-count`, method: 'GET', signal },
    options
  );
};

export const getGetMonthlyDrinkCountQueryKey = (userId: string) => {
  return [`/api/drinks/${userId}/monthly-count`] as const;
};

export const getGetMonthlyDrinkCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMonthlyDrinkCountQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMonthlyDrinkCount>>
  > = ({ signal }) => getMonthlyDrinkCount(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMonthlyDrinkCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMonthlyDrinkCount>>
>;
export type GetMonthlyDrinkCountQueryError = void;

export function useGetMonthlyDrinkCount<
  TData = Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
  TError = void,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
          TError,
          Awaited<ReturnType<typeof getMonthlyDrinkCount>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMonthlyDrinkCount<
  TData = Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
          TError,
          Awaited<ReturnType<typeof getMonthlyDrinkCount>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMonthlyDrinkCount<
  TData = Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary R√©cup√©rer le nombre de boissons consomm√©es par mois pour un utilisateur
 */

export function useGetMonthlyDrinkCount<
  TData = Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
  TError = void,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonthlyDrinkCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMonthlyDrinkCountQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ajouter une nouvelle boisson
 */
export const addDrink = (
  addDrinkDTO: BodyType<AddDrinkDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<DrinkDTO>(
    {
      url: `/api/drinks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addDrinkDTO,
      signal,
    },
    options
  );
};

export const getAddDrinkMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addDrink>>,
    TError,
    { data: BodyType<AddDrinkDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addDrink>>,
  TError,
  { data: BodyType<AddDrinkDTO> },
  TContext
> => {
  const mutationKey = ['addDrink'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addDrink>>,
    { data: BodyType<AddDrinkDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return addDrink(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddDrinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof addDrink>>
>;
export type AddDrinkMutationBody = BodyType<AddDrinkDTO>;
export type AddDrinkMutationError = void;

/**
 * @summary Ajouter une nouvelle boisson
 */
export const useAddDrink = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addDrink>>,
      TError,
      { data: BodyType<AddDrinkDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof addDrink>>,
  TError,
  { data: BodyType<AddDrinkDTO> },
  TContext
> => {
  const mutationOptions = getAddDrinkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
