/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * BrewTrack API üçª
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  AuthForgotPasswordRequestDTO,
  AuthForgotPasswordResponseDTO,
  AuthLoginGoogleRequestDTO,
  AuthLoginRequestDTO,
  AuthLoginResponseDTO,
  AuthRefreshTokenRequestDTO,
  AuthRegisterRequestDTO,
  AuthResetPasswordRequestDTO,
  AuthResetPasswordResponseDTO,
} from './Api.schemas';

import { customInstance } from '../customInstance';
import type { BodyType } from '../customInstance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const postLogin = (
  authLoginRequestDTO: BodyType<AuthLoginRequestDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AuthLoginResponseDTO>(
    {
      url: `/api/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authLoginRequestDTO,
      signal,
    },
    options
  );
};

export const getPostLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: BodyType<AuthLoginRequestDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: BodyType<AuthLoginRequestDTO> },
  TContext
> => {
  const mutationKey = ['postLogin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: BodyType<AuthLoginRequestDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return postLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;
export type PostLoginMutationBody = BodyType<AuthLoginRequestDTO>;
export type PostLoginMutationError = unknown;

export const usePostLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLogin>>,
      TError,
      { data: BodyType<AuthLoginRequestDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: BodyType<AuthLoginRequestDTO> },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postGoogleAuth = (
  authLoginGoogleRequestDTO: BodyType<AuthLoginGoogleRequestDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AuthLoginResponseDTO>(
    {
      url: `/api/auth/callback/google`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authLoginGoogleRequestDTO,
      signal,
    },
    options
  );
};

export const getPostGoogleAuthMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGoogleAuth>>,
    TError,
    { data: BodyType<AuthLoginGoogleRequestDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postGoogleAuth>>,
  TError,
  { data: BodyType<AuthLoginGoogleRequestDTO> },
  TContext
> => {
  const mutationKey = ['postGoogleAuth'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postGoogleAuth>>,
    { data: BodyType<AuthLoginGoogleRequestDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return postGoogleAuth(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostGoogleAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof postGoogleAuth>>
>;
export type PostGoogleAuthMutationBody = BodyType<AuthLoginGoogleRequestDTO>;
export type PostGoogleAuthMutationError = unknown;

export const usePostGoogleAuth = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postGoogleAuth>>,
      TError,
      { data: BodyType<AuthLoginGoogleRequestDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postGoogleAuth>>,
  TError,
  { data: BodyType<AuthLoginGoogleRequestDTO> },
  TContext
> => {
  const mutationOptions = getPostGoogleAuthMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postLogout = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/auth/logout`, method: 'POST', signal },
    options
  );
};

export const getPostLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['postLogout'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogout>>,
    void
  > = () => {
    return postLogout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogout>>
>;

export type PostLogoutMutationError = unknown;

export const usePostLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postLogout>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postRefresh = (
  authRefreshTokenRequestDTO: BodyType<AuthRefreshTokenRequestDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AuthLoginResponseDTO>(
    {
      url: `/api/auth/refresh`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authRefreshTokenRequestDTO,
      signal,
    },
    options
  );
};

export const getPostRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRefresh>>,
    TError,
    { data: BodyType<AuthRefreshTokenRequestDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRefresh>>,
  TError,
  { data: BodyType<AuthRefreshTokenRequestDTO> },
  TContext
> => {
  const mutationKey = ['postRefresh'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRefresh>>,
    { data: BodyType<AuthRefreshTokenRequestDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return postRefresh(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRefresh>>
>;
export type PostRefreshMutationBody = BodyType<AuthRefreshTokenRequestDTO>;
export type PostRefreshMutationError = unknown;

export const usePostRefresh = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postRefresh>>,
      TError,
      { data: BodyType<AuthRefreshTokenRequestDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postRefresh>>,
  TError,
  { data: BodyType<AuthRefreshTokenRequestDTO> },
  TContext
> => {
  const mutationOptions = getPostRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const register = (
  authRegisterRequestDTO: BodyType<AuthRegisterRequestDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/api/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authRegisterRequestDTO,
      signal,
    },
    options
  );
};

export const getRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: BodyType<AuthRegisterRequestDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: BodyType<AuthRegisterRequestDTO> },
  TContext
> => {
  const mutationKey = ['register'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: BodyType<AuthRegisterRequestDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return register(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof register>>
>;
export type RegisterMutationBody = BodyType<AuthRegisterRequestDTO>;
export type RegisterMutationError = unknown;

export const useRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: BodyType<AuthRegisterRequestDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: BodyType<AuthRegisterRequestDTO> },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const forgotPassword = (
  authForgotPasswordRequestDTO: BodyType<AuthForgotPasswordRequestDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AuthForgotPasswordResponseDTO>(
    {
      url: `/api/auth/forgot-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authForgotPasswordRequestDTO,
      signal,
    },
    options
  );
};

export const getForgotPasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPassword>>,
    TError,
    { data: BodyType<AuthForgotPasswordRequestDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof forgotPassword>>,
  TError,
  { data: BodyType<AuthForgotPasswordRequestDTO> },
  TContext
> => {
  const mutationKey = ['forgotPassword'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof forgotPassword>>,
    { data: BodyType<AuthForgotPasswordRequestDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return forgotPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof forgotPassword>>
>;
export type ForgotPasswordMutationBody = BodyType<AuthForgotPasswordRequestDTO>;
export type ForgotPasswordMutationError = unknown;

export const useForgotPassword = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof forgotPassword>>,
      TError,
      { data: BodyType<AuthForgotPasswordRequestDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof forgotPassword>>,
  TError,
  { data: BodyType<AuthForgotPasswordRequestDTO> },
  TContext
> => {
  const mutationOptions = getForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const resetPassword = (
  authResetPasswordRequestDTO: BodyType<AuthResetPasswordRequestDTO>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AuthResetPasswordResponseDTO>(
    {
      url: `/api/auth/reset-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authResetPasswordRequestDTO,
      signal,
    },
    options
  );
};

export const getResetPasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: BodyType<AuthResetPasswordRequestDTO> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: BodyType<AuthResetPasswordRequestDTO> },
  TContext
> => {
  const mutationKey = ['resetPassword'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { data: BodyType<AuthResetPasswordRequestDTO> }
  > = (props) => {
    const { data } = props ?? {};

    return resetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetPassword>>
>;
export type ResetPasswordMutationBody = BodyType<AuthResetPasswordRequestDTO>;
export type ResetPasswordMutationError = unknown;

export const useResetPassword = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resetPassword>>,
      TError,
      { data: BodyType<AuthResetPasswordRequestDTO> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: BodyType<AuthResetPasswordRequestDTO> },
  TContext
> => {
  const mutationOptions = getResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
